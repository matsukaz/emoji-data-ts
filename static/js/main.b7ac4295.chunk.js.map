{"version":3,"sources":["App.tsx","index.tsx"],"names":["EmojiImg","_a","emoji","react","style","backgroundImage","backgroundPosition","x","y","backgroundSize","sheetSizeX","sheetSizeY","display","height","width","src_App","_super","App","props","_this","call","this","state","filteredEmojiData","emoji_data_ts_es5","Object","tslib_es6","prototype","componentDidMount","setState","render","className","type","onChange","e","onChangeFilter","map","a","i","emojiImage","getImageData","short_name","key","value","index","emojis","emojiCategoryLookUp","get","position","currentTarget","length","searchEmoji","react_dom","document","getElementById"],"mappings":"qJAsEA,SAASA,EAASC,OAACC,EAAAD,EAAAC,MACjB,OAAQC,EAAA,sBACNC,MAAO,CACLC,gBACE,kFACFC,mBAAuBJ,EAAMK,EAAC,KAAKL,EAAMM,EAAC,IAC1CC,eAAmBP,EAAMQ,WAAU,KAAKR,EAAMS,WAAU,IACxDC,QAAS,eACTC,OAAQ,OACRC,MAAO,UAKE,IAAAC,EAjFf,SAAAC,GAEE,SAAAC,EAAYC,GAAZ,IAAAC,EACEH,EAAAI,KAAAC,KAAMH,IAAMG,YACZF,EAAKG,MAAQ,CACXC,kBAAmB,IAErBJ,EAAKjB,MAAQ,IAAIsB,EAAA,IA0DrB,OAjEkBC,OAAAC,EAAA,EAAAD,CAAAR,EAAAD,GASTC,EAAAU,UAAAC,kBAAP,WACEP,KAAKQ,SAAS,CACZN,kBAAmB,MAKhBN,EAAAU,UAAAG,OAAP,eAAAX,EAAAE,KACE,OACElB,EAAA,qBAAK4B,UAAU,gBAEb5B,EAAA,uBAAO6B,KAAK,OAAOC,SAEjB,SAACC,GAAM,OAAAf,EAAKgB,eAAeD,MAE7B/B,EAAA,yBACGkB,KAAKC,MAAMC,kBAAkBa,IAAI,SAACC,EAAGC,GACpC,IAAMC,EAAapB,EAAKjB,MAAMsC,aAAaH,EAAEI,YAE7C,OAAiB,MAAdF,EACMpC,EAAA,2BAEFA,EAAA,cAACH,EAAQ,CAAC0C,IAAKJ,EAAGpC,MAAOqC,OAGpCpC,EAAA,qBAAK4B,UAAU,gBACZP,EAAA,EAAeY,IAAI,SAACO,EAAOC,GAC1B,OACEzC,EAAA,qBAAKuC,IAAKE,GACRzC,EAAA,8BAAQwC,SAGQ,OADRE,EAAS1B,EAAKjB,MAAM4C,oBAAoBC,IAAIJ,IAEzCE,EAAOT,IAAI,SAACC,EAAGC,GACpB,IAAMU,EAAW7B,EAAKjB,MAAMsC,aAAaH,EAAEI,YAC3C,OAAgB,MAAZO,EACK7C,EAAA,2BAEFA,EAAA,cAACH,EAAQ,CAAC0C,IAAKJ,EAAGpC,MAAO8C,MAG7B7C,EAAA,4BAXR,IACO0C,OAmBd5B,EAAAU,UAAAQ,eAAR,SAAuBD,GACrB,IAAMW,EAA0C,IAAjCX,EAAEe,cAAcN,MAAMO,OAAe,GAAK7B,KAAKnB,MAAMiD,YAAYjB,EAAEe,cAAcN,MAAO,IACvGtB,KAAKQ,SAAS,CACZN,kBAAmBsB,KAGzB5B,EAjEA,CAAkBd,EAAA,iBCElBiD,EAAA,OACEjD,EAAA,cAACY,EAAG,MACJsC,SAASC,eAAe","file":"static/js/main.b7ac4295.chunk.js","sourcesContent":["import { categoriesData, Emoji, EmojiData, EmojiImage } from 'emoji-data-ts'\nimport * as React from 'react'\n\nclass App extends React.Component<{}, { filteredEmojiData: Emoji[] }> {\n  private emoji: EmojiData ;\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = {\n      filteredEmojiData: []\n    }\n    this.emoji = new EmojiData()\n  }\n  public componentDidMount(){\n    this.setState({\n      filteredEmojiData: []\n    })\n  }\n\n\n  public render() {\n    return (\n      <div className=\"App\">\n        Filter\n        <input type=\"text\" onChange={\n          // tslint:disable-next-line:jsx-no-lambda\n          (e) => this.onChangeFilter(e)\n        } />\n        <div>\n          {this.state.filteredEmojiData.map((a, i) => {\n            const emojiImage = this.emoji.getImageData(a.short_name)\n\n            if(emojiImage == null) {\n              return <span />\n            }\n            return <EmojiImg key={i} emoji={emojiImage}/>\n          })}\n        </div>\n        <div className=\"emoji-picker\">\n          {categoriesData.map((value, index) => {\n            return (\n              <div key={index}>\n                <h2>---{value}---</h2>\n                {(() => {\n                  const emojis = this.emoji.emojiCategoryLookUp.get(value)\n                  if (emojis != null) {\n                    return emojis.map((a, i) => {\n                      const position = this.emoji.getImageData(a.short_name)\n                      if (position == null) {\n                        return <span />\n                      }\n                      return <EmojiImg key={i} emoji={position}/>\n                    })\n                  }\n                  return <span />\n                })()}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n  private onChangeFilter(e: React.FormEvent<HTMLInputElement>) {\n    const emojis = e.currentTarget.value.length === 0 ? [] : this.emoji.searchEmoji(e.currentTarget.value, 10)\n    this.setState({\n      filteredEmojiData: emojis\n    })\n  }\n}\n\nfunction EmojiImg({emoji}: {emoji: EmojiImage}) {\n  return (<span\n    style={{\n      backgroundImage:\n        'url(https://unpkg.com/emoji-datasource-apple@5.0.1/img/apple/sheets-256/64.png)',\n      backgroundPosition: `${emoji.x}% ${emoji.y}%`,\n      backgroundSize: `${emoji.sheetSizeX}% ${emoji.sheetSizeY}%`,\n      display: 'inline-block',\n      height: '24px',\n      width: '24px'\n    }}\n  />)\n}\n\nexport default App\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root') as HTMLElement\n);\n"],"sourceRoot":""}